#!/bin/bash

##### In order to make this work, you need a access token and refresh token
##### Get them here: https://developer.spotify.com/documentation/general/guides/authorization-guide/
##### Put them in a .env file with the variables SPOTIFY_ACCESS_TOKEN=XXXXXXXXXX and SPOTIFY_REFRESH_TOKEN=XXXXXXXXXX

if [ -f .env ]; then
        export $(cat .env | sed 's/#.*//g' | xargs)
fi

if [[ "$*" = *"-debug"* ]]; then
        debug_mode="on"
        echo "Debug mode on"
fi

function selectPlaylist() {
        # include here all listed playlists inside of this function below
        selection=(Worship Elektro Guitar)
        # when no argument for a playlist is passed into this function, it will randomly select one
        input=$1
        if [ -z "$1" ]; then
                input=${selection[$RANDOM % ${#selection[@]}]}
        fi
        if [[ "$input" = "Worship" ]]; then
                user="f7f7f"
                playlist="2NFqwWx2Oo5PBGmfDmbUGE"
        fi

        if [[ "$input" = "Elektro" ]]; then
                user="f7f7f"
                playlist="1kQ77NTW6LN1xKJI8a8rlJ"
        fi

        if [[ "$input" = "Guitar" ]]; then
                user="f7f7f"
                playlist="2Wn8mZPx5ptRI6RH8Vrax6"
        fi
}

function updateToken() {
        if [[ "$debug_mode" = "on" ]]; then
                echo "Checking token status ..."
        fi
        if test ! -f "./token"; then
                if [[ "$debug_mode" = "on" ]]; then
                        echo "Creating new token ..."
                fi
                new_token=$(curl -s -H "Authorization: Basic $SPOTIFY_ACCESS_TOKEN" -d grant_type=refresh_token -d refresh_token=$SPOTIFY_REFRESH_TOKEN https://accounts.spotify.com/api/token | jq -r '.access_token')
                echo $new_token >./token
                if [[ "$debug_mode" = "on" ]]; then
                        echo "New token is: " $new_token
                fi
                echo "Created new token file"
                return
        fi
        if test $(find "./token" -mmin +59); then
                if [[ "$debug_mode" = "on" ]]; then
                        echo "Updating existing token ..."
                fi
                new_token=$(curl -s -H "Authorization: Basic $SPOTIFY_ACCESS_TOKEN" -d grant_type=refresh_token -d refresh_token=$SPOTIFY_REFRESH_TOKEN https://accounts.spotify.com/api/token | jq -r '.access_token') >./token
                echo $new_token >./token
                if [[ "$debug_mode" = "on" ]]; then
                        echo "New token is: " $new_token
                fi
                echo "Updated token"
                return
        fi
        if [[ "$debug_mode" = "on" ]]; then
                echo "Using existing token - didn't create new one, didn't update"
        fi
}

function checkStatus() {
        response=$(curl -s -X GET "https://api.spotify.com/v1/me/player" -H "Accept: application/json" -H "Authorization: Bearer $token")
        # uncomment the following if clause for extensive JSON response from Spotify for debugging
        #if [[ "$debug_mode" = "on" ]]; then
        #        echo $response
        # fi

        # check if response was healthy
        error=$(echo $response | jq -r '.error.status')
        if [[ $error = 401 ]]; then
                message=$(echo $response | jq -r '.error.message')
                echo "No connection to spotify: $message"
                exit
        fi
        # store relevant info
        playingType=$(echo $response | jq -r '.context.type')
        if [ "$playingType" = null ]; then
                playingType=$(echo $response | jq -r '.currently_playing_type')
        fi
        isPlaying=$(echo $response | jq -r '.is_playing')
        currentSelectedDevice=$(echo $response | jq -r '.device.name')
        # display relevant info
        printf "Current status \n #playing: $isPlaying \n #type: $playingType \n #device: $currentSelectedDevice\n"
}

function connectAirplay() {
        ausschluss=("Apple TV (Wohnzimmer)" Computer) # add here airplay devices by name that you want to exclude from syncing music
        lautsprecher=$(curl -s -X GET $HOST_IP:3689/api/outputs | jq '.outputs')
        for i in $(echo "${lautsprecher}" | jq -r '.[] | @base64'); do
                _jq() {
                        echo ${i} | base64 --decode | jq -r ${1}
                }
                if [[ ! " ${ausschluss[@]} " =~ " $(_jq '.name') " ]]; then
                        if [ "$(_jq '.selected')" = false ]; then
                                echo "Switching on $(_jq '.name')"
                                curl -X PUT $HOST_IP:3689/api/outputs/$(_jq '.id')/toggle
                                sleep .5
                        else
                                echo "$(_jq '.name') already switched on"
                        fi
                fi
        done
}

function disconnectAirplay() {
        ausschluss=("Apple TV (Wohnzimmer)" Computer) # add here airplay devices by name that you want to exclude from syncing music
        lautsprecher=$(curl -s -X GET $HOST_IP:3689/api/outputs | jq '.outputs')
        for i in $(echo "${lautsprecher}" | jq -r '.[] | @base64'); do
                _jq() {
                        echo ${i} | base64 --decode | jq -r ${1}
                }
                if [[ ! " ${ausschluss[@]} " =~ " $(_jq '.name') " ]]; then
                        if [ "$(_jq '.selected')" = true ]; then
                                echo "Switching off $(_jq '.name')"
                                curl -X PUT $HOST_IP:3689/api/outputs/$(_jq '.id')/toggle
                                sleep .5
                        else
                                echo "$(_jq '.name') already switched off"
                        fi
                fi
        done
}

if [[ "$1" = "continue" ]]; then

        # Check if Token is new enough
        updateToken
        # Read token from file
        token=$(<./token)
        # Check connection to spotify and whats currently playing
        checkStatus
        # Selecting the Raspotify device we want to play the music on, in our case "Spotify-Smart-Home"
        device=$(curl -s -X GET "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.devices[] | select(.name == "Spotify-Smart-Home") | .id')
        if [[ "$debug_mode" = "on" ]]; then
                echo "Device ID: $device"
        fi
        connectAirplay

        # Catching the case that no song, album, playlist is selected
        whatsPlaying=$(curl -s -X GET "https://api.spotify.com/v1/me/player" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.currently_playing_type')
        if [[ "$debug_mode" = "on" ]]; then
                echo "I am currently playing a $whatsPlaying"
        fi
        if [ -z "$whatsPlaying" ]; then
                # Nothing to continue, so selecting a random Playlist to play
                echo "No song to continue - playing random Playlist"
                selectPlaylist
                # determining a random song to start with
                lengthPlaylist=$(curl -s -X GET "https://api.spotify.com/v1/users/${user}/playlists/${playlist}" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.tracks | select(.total) | .total') >/dev/null 2>&1
                max=$lengthPlaylist
                DIV=$((max + 1))
                R=$(($RANDOM % $DIV))
                echo "Starting Playlist $input"
                # starting the playlist, activating shuffle and playlist repeat
                curl -X PUT "https://api.spotify.com/v1/me/player/play?device_id=${device}" -H "Accept: application/json" -H "Authorization: Bearer $token" -H "Content-Type: application/json" --data "{\"context_uri\":\"spotify:user:${user}:playlist:${playlist}\",\"offset\":{\"position\":$R}}" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/volume?volume_percent=100" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/shuffle?state=true" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/repeat?state=context" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                exit
        fi

        # Checking if playlist has been given as input to play, then this playlist is played and program is exiting
        if [[ "$2" = "playlist" ]]; then
                if [ ! -z "$3" ]; then
                        echo "Playlist input $3 registered, selecting it to play"
                        input=$3
                fi
                selectPlaylist $input
                # determining a random song to start with
                lengthPlaylist=$(curl -s -X GET "https://api.spotify.com/v1/users/${user}/playlists/${playlist}" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.tracks | select(.total) | .total')
                max=$lengthPlaylist
                DIV=$((max + 1))
                R=$(($RANDOM % $DIV))
                echo "Starting Playlist $input"

                # starting the playlist, activating shuffle and playlist repeat
                curl -X PUT "https://api.spotify.com/v1/me/player/play?device_id=${device}" -H "Accept: application/json" -H "Authorization: Bearer $token" -H "Content-Type: application/json" --data "{\"context_uri\":\"spotify:user:${user}:playlist:${playlist}\",\"offset\":{\"position\":$R}}" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/volume?volume_percent=100" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/shuffle?state=true" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                curl -X PUT "https://api.spotify.com/v1/me/player/repeat?state=context" -H "Accept: application/json" -H "Authorization: Bearer $token" >/dev/null 2>&1
                exit
        fi

        # If Spotify is already playing something, then just switching to the selected device "Spotify-Smart-Home"
        if [[ "$isPlaying" = "true" ]]; then
                echo "Continue current playback, just switching device to Spotify-Smart-Home"
                curl -X PUT "https://api.spotify.com/v1/me/player" --data "{\"device_ids\":[\"${device}\"]}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $token"
                exit
        fi

        # If no music is playing, continuing currently selected music - rapid succession of commands error-prone therefore, small sleep in between
        echo "Track selected but paused, will continue"
        if [[ "$debug_mode" = "on" ]]; then
                checkStatus
                echo "display Device to switch to " $device
                echo "check value Token" $token
        fi

        curl -X PUT "https://api.spotify.com/v1/me/player" --data "{\"device_ids\":[\"${device}\"]}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $token"
        sleep .1
        if [[ "$debug_mode" = "on" ]]; then
                checkStatus
                # Todo - write here potential loop for checking whether device was selected
                selected_device=$(curl -s -X GET "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.devices[] | select(.name == "Spotify-Smart-Home") | .id')
                echo "Ausgewaehltes Device: $selected_device"
        fi
        curl -X PUT "https://api.spotify.com/v1/me/player/play?device_id=${device}" -H "Accept: application/json" -H "Authorization: Bearer $token" -H "Content-Type: application/json" -H "Content-Length: 0"
        sleep .1
        if [[ "$debug_mode" = "on" ]]; then
                checkStatus
        fi
        curl -X PUT "https://api.spotify.com/v1/me/player/volume?volume_percent=100" -H "Accept: application/json" -H "Authorization: Bearer $token"
fi

if [[ "$1" = "stop" ]]; then

        # Check if Token is new enough
        updateToken
        # Read token from file
        token=$(<./token)
        # Pause the current song
        curl -X PUT "https://api.spotify.com/v1/me/player/pause" -H "Accept: application/json" -H "Authorization: Bearer $token" -H "Content-Type: application/json" -H "Content-Length: 0"
        # Select my iPhone as device
        #curl -X GET "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Authorization: Bearer $token"
        device=$(curl -s -X GET "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Authorization: Bearer $token" | jq -r '.devices[] | select(.name == "F iPhone Xs") | .id')
        if [ ! -z "$device" ]; then
                curl -X "PUT" "https://api.spotify.com/v1/me/player" --data "{\"device_ids\":[\"${device}\"]}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $token"
                echo "Disconnected from Spotify-Smart-Home"
        fi
        echo "Stopped the playback"
        if [[ "$2" = "disconnect" ]]; then
                disconnectAirplay
        fi

fi

if [[ "$1" = "connect_airplay" ]]; then
        connectAirplay
fi

if [[ "$1" = "test" ]]; then
        if [[ "$debug_mode" = "on" ]]; then
                echo "Testing ..."
        fi
        # Check if Token is new enough
        updateToken
        # Read token from file
        token=$(<./token)
        # Check the status and display information
        checkStatus
fi
